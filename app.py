import streamlit as st
import cv2
import numpy as np
import requests
from io import BytesIO
from PIL import Image

st.set_page_config(layout="wide")
st.title("üéÅ –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
main_image_url = "https://quickimagetools.com/uploads/image_68a1212295ed12.74319359.jpg"
response = requests.get(main_image_url)
img = Image.open(BytesIO(response.content))
img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

# –ò—â–µ–º –∂—ë–ª—Ç—ã–µ –ø–æ–¥–∞—Ä–∫–∏
hsv = cv2.cvtColor(img_cv, cv2.COLOR_BGR2HSV)
lower_yellow = np.array([20, 100, 100])
upper_yellow = np.array([35, 255, 255])
mask = cv2.inRange(hsv, lower_yellow, upper_yellow)
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—â–µ–π
gift_images = [
    "https://quickimagetools.com/uploads/image_68a0f2056d96d0.56792069.jpg",
    "https://quickimagetools.com/uploads/image_68a0f21b7a7f12.50304972.jpg",
    "https://quickimagetools.com/uploads/image_68a0f272462c37.02957994.jpg",
    "https://quickimagetools.com/uploads/image_68a0f28a1a4fa6.73539447.jpg"
]
gift_items = [Image.open(BytesIO(requests.get(url).content)) for url in gift_images]

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤
gifts = []
for cnt in contours:
    x, y, w, h = cv2.boundingRect(cnt)
    if w > 50 and h > 50:
        gifts.append((x, y, w, h))
        cv2.rectangle(img_cv, (x, y), (x + w, y + h), (0, 255, 0), 2)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
if "opened" not in st.session_state:
    st.session_state.opened = [False] * len(gifts)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
for i, (x, y, w, h) in enumerate(gifts):
    col = st.columns(len(gifts))[i]
    with col:
        if not st.session_state.opened[i]:
            if st.button(f"–û—Ç–∫—Ä—ã—Ç—å üéÅ #{i+1}"):
                st.session_state.opened[i] = True
                item_resized = gift_items[i].resize((w, h))
                item_cv = cv2.cvtColor(np.array(item_resized), cv2.COLOR_RGB2BGR)
                img_cv[y:y+h, x:x+w] = item_cv
                cv2.rectangle(img_cv, (x, y), (x + w, y + h), (0, 0, 255), 2)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
st.image(img_cv, channels="BGR", caption="–í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏")
